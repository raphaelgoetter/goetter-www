
/* ----- Tumblr ----- */

// number of posts to fetch
var recent_posts_count = 5;

// maximum length of titles for truncation (plus 3 for ...)
var truncate_length = 70;

// start a div for the recent posts, you can add any ul,etc, formatting here also
var recentPostsHtml = "<ul>";

// loop around and proess recent_post_count number of recent posts
for (var i = 0; i < recent_posts_count; i++) {

	// get a post
	// console.log(tumblr_api_read);
	var post = tumblr_api_read.posts[i];

	// we need to extract different fields for different kinds of post
	var extract_field = "";
	// we may wish to truncate some (or all, or none) of them
	var truncate = false;
	// we may wish to add a prefix to indictae (for example) the kind of post
	var prefix = "";

	// In order for this to work really properly, we need to cater for all
	// the different post types that are available ...

	// regular 'text' post
	if( post.type == "regular")
	{
	prefix = "";
	truncate = false;
	extract_field = "regular-title";
	}

	// link post
	if( post.type == "link")
	{
	prefix = "";
	truncate = true;
	extract_field = "link-text";
	}

	// quote post
	if( post.type == "quote")
	{
	prefix = "";
	truncate = true;
	extract_field = "quote-text";
	}

	// photo post
	if( post.type == "photo")
	{
	prefix ="";
	truncate = true;
	// note we use 'slug' as the field here, because tumblr provides us with
	// a nice truncated short clean summary. whereas the captions have html in them
	// html like div an p, which will muck up the formatting
	extract_field = "slug";
	}

	// Video post
	if( post.type == "video")
	{
	prefix = "";
	truncate = true;
	// slug again, see note above
	extract_field = "slug";
	}

	// Audio post
	if( post.type == "audio")
	{
	prefix = "";
	truncate = true;
	// slug again, see note above
	extract_field = "slug";
	}

	// Conversation post
	if( post.type == "conversation")
	{
	prefix = "";
	truncate = true;
	extract_field = "conversation-title";

	}

	// Ask/Answer post
	if( post.type == "answer")
	{
	prefix = "";
	truncate = true;
	// might need to be 'slug' as well
	extract_field = "answer";
	}

	// get the post's url
	var url = post.url;

	// get the field we're going to use as the title
	var title_field = post[extract_field];

	// truncate and add elipses if desired
	if( title_field.length > truncate_length )
	{
	title_field = title_field.substring( 0, truncate_length ) + "...";
	}

	// add the prefix is there is one
	var title = prefix + title_field;

	// add it into the html string
	recentPostsHtml += '<li><a href="' + url + '">' + title + '</a></li>';

}

recentPostsHtml += '</ul>';

document.getElementById('recentPosts').innerHTML = recentPostsHtml;

/* ----- Flickr ----- */

if(screen.width>767) {
	var bigjs = document.createElement('script');
	bigjs.src = 'http://www.flickr.com/badge_code_v2.gne?count=12&display=latest&size=s&layout=x&source=user&user=29174632%40N00';
	bigjs.type = 'text/javascript';
	bigjs.onload = function() {
		document.getElementById('flickr_badge_wrapper').innerHTML = b_txt;
	};
	document.getElementById('flickr_badge_wrapper').appendChild(bigjs);
}
